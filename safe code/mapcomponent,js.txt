mapcomponent,js:


import React, { useState } from "react";
import { MapContainer, ImageOverlay, Marker, Popup, Polyline } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import mallData from "../data/stores.json"; // Store & Walkable Paths Data
import { findShortestPath } from "./ShortestPath"; // Shortest Path Algorithm
import L from "leaflet";
import mapImage from "../assets/map1.png"; // Mall Blueprint
import markerIconImg from "../assets/marker.png"; // Store Marker Icon

// 🗺️ Set Map Image Dimensions (Match the actual map image size)
const imageWidth = 1039;  
const imageHeight = 1080; 
const bounds = [[0, 0], [imageHeight, imageWidth]];

// 📌 Custom Marker Icon
const customIcon = new L.Icon({
    iconUrl: markerIconImg,
    iconSize: [25, 25], 
    iconAnchor: [12, 25] 
});

// 📌 Function to Adjust Y-Coordinates (Fixes Alignment Issues)
const adjustY = (y) => imageHeight - y; // Flip Y-axis to align correctly

const MapComponent = () => {
    const [source, setSource] = useState("");  
    const [destination, setDestination] = useState("");  
    const [shortestPath, setShortestPath] = useState([]);

    // 📌 Find & Display Shortest Path
    const handleFindPath = () => {
        if (!source || !destination) {
            alert("Please select both source and destination.");
            return;
        }
        const path = findShortestPath(source, destination);
        setShortestPath(path);
    };

    return (
        <div style={{ padding: "10px" }}>
            {/* 📌 Dropdown Selection */}
            <div style={{ marginBottom: "10px" }}>
                <label>Source: </label>
                <select value={source} onChange={(e) => setSource(e.target.value)}>
                    <option value="">Select Source</option>
                    {mallData.stores.map(store => (
                        <option key={store.id} value={store.id}>{store.id}</option>
                    ))}
                </select>

                <label style={{ marginLeft: "20px" }}>Destination: </label>
                <select value={destination} onChange={(e) => setDestination(e.target.value)}>
                    <option value="">Select Destination</option>
                    {mallData.stores.map(store => (
                        <option key={store.id} value={store.id}>{store.id}</option>
                    ))}
                </select>

                <button 
    onClick={handleFindPath} 
    style={{ 
        backgroundColor: "#007bff", color: "white", 
        padding: "10px 16px", fontSize: "16px", 
        border: "none", cursor: "pointer", borderRadius: "5px" 
    }}>
    Find Path
</button>

            </div>

            {/* 🗺️ Map Display */}
            <MapContainer 
                center={[imageHeight / 2, imageWidth / 2]}  
                zoom={1} 
                maxBounds={bounds} 
                style={{ height: "150vh", width: "100vw" }}  
                crs={L.CRS.Simple}
            >
                <ImageOverlay url={mapImage} bounds={bounds} />

                {/* 📍 Store Markers */}
                {mallData.stores.map((store) => (
                    <Marker key={store.id} position={[adjustY(store.y), store.x]} icon={customIcon}>
                        <Popup>{store.id}</Popup>
                    </Marker>
                ))}

                {/* 🔵 Walkable Paths */}
                {mallData.Walkable_paths.map((path, index) => {
                    const from = mallData.stores.find(s => s.id === path.from);
                    const to = mallData.stores.find(s => s.id === path.to);
                    return from && to ? (
                        <Polyline key={index} positions={[[adjustY(from.y), from.x], [adjustY(to.y), to.x]]} color="blue" />
                    ) : null;
                })}

                {/* 🔴`
                 Shortest Path (Highlighted) */}
                {shortestPath.length > 1 && (
                    <Polyline 
                        positions={shortestPath.map(node => {
                            const store = mallData.stores.find(s => s.id === node);
                            return store ? [adjustY(store.y), store.x] : null;
                        }).filter(Boolean)} 
                        color="red" 
                        weight={5} 
                    />
                )}
            </MapContainer>
        </div>
    );
};

export default MapComponent;

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
app.js:

import React, { useState } from "react";
import MapComponent from "./components/MapComponent";
import SearchBar from "./components/SearchBar";

const App = () => {
  const [source, setSource] = useState("");
  const [destination, setDestination] = useState("");

  return (
    <div>
      <h1>Indoor Navigation</h1>
      <SearchBar onFindPath={(src, dest) => { setSource(src); setDestination(dest); }} />
      <MapComponent source={source} destination={destination} />
    </div>
  );
};

export default App;
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
shortestpath.js

import mallData from "../data/stores.json";

// 🛠 Function to Build the Navigation Graph
const buildGraph = () => {
    let graph = {};

    // ✅ Step 1: Add Store-to-Corridor Connections from `corridors`
    mallData.corridors.forEach(({ from, to }) => {
        if (!graph[from]) graph[from] = {};
        if (!graph[to]) graph[to] = {};

        const fromNode = mallData.stores.find(store => store.id === from);
        const toNode = mallData.stores.find(store => store.id === to);

        if (fromNode && toNode) {
            const distance = Math.sqrt(
                Math.pow(toNode.x - fromNode.x, 2) + Math.pow(toNode.y - fromNode.y, 2)
            );
            graph[from][to] = distance;
            graph[to][from] = distance;
        }
    });

    // ✅ Step 2: Add Corridor-to-Corridor Connections from `Walkable_paths`
    mallData.Walkable_paths.forEach(({ from, to }) => {
        if (!graph[from]) graph[from] = {};
        if (!graph[to]) graph[to] = {};

        const fromNode = mallData.stores.find(store => store.id === from);
        const toNode = mallData.stores.find(store => store.id === to);

        if (fromNode && toNode) {
            const distance = Math.sqrt(
                Math.pow(toNode.x - fromNode.x, 2) + Math.pow(toNode.y - fromNode.y, 2)
            );
            graph[from][to] = distance;
            graph[to][from] = distance;
        }
    });

    console.log("📌 Updated Graph:", graph);
    return graph;
};

// 🛠 Dijkstra’s Algorithm to Find Shortest Path
const dijkstra = (graph, startNode, endNode) => {
    let distances = {};
    let prev = {};
    let pq = new Set(Object.keys(graph));

    Object.keys(graph).forEach(node => {
        distances[node] = Infinity;
    });
    distances[startNode] = 0;

    while (pq.size) {
        let minNode = [...pq].reduce((min, node) => (distances[node] < distances[min] ? node : min), [...pq][0]);

        if (minNode === endNode) break;
        pq.delete(minNode);

        for (let neighbor in graph[minNode]) {
            let newDist = distances[minNode] + graph[minNode][neighbor];
            if (newDist < distances[neighbor]) {
                distances[neighbor] = newDist;
                prev[neighbor] = minNode;
            }
        }
    }

    let path = [];
    let step = endNode;
    while (prev[step]) {
        path.unshift(step);
        step = prev[step];
    }
    if (distances[endNode] !== Infinity) path.unshift(startNode);

    console.log("✅ Shortest Path Found:", path);
    return path;
};

// 🛠 Function to Find Shortest Path Between Two Stores
export const findShortestPath = (start, end) => {
    console.log(`🔍 Finding path from: ${start} to: ${end}`);
    const graph = buildGraph();
    return dijkstra(graph, start, end);
};

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
frontend/
│── public/
│── src/
│   ├── components/
│   │   ├── Navbar.js
│   │   ├── StoreList.js
│   │   ├── MapComponent.js
│   │   ├── SearchBar.js
│   ├── assets/  (for images, icons, etc.)
│   ├── data/    (for storing JSON with store coordinates)
│   │   ├── stores.json
│   ├── App.js
│   ├── index.js
│   ├── styles/  (for CSS files)
│── package.json
│── README.md





indoor-navigation/
│── backend/                # Backend code (Node.js + Express)
│   ├── models/
│   │   ├── store.js        # Store schema
│   │   ├── path.js         # Paths schema
│   ├── routes/
│   │   ├── stores.js       # Routes for store data
│   │   ├── navigation.js   # Routes for finding shortest path
│   ├── controllers/
│   │   ├── navigationController.js # Logic for shortest path
│   │   ├── storeController.js      # Fetching store info
│   ├── utils/
│   │   ├── dijkstra.js     # Dijkstra’s algorithm for pathfinding
│   ├── server.js           # Main backend entry point
│
│── frontend/               # Frontend code (React.js)
│   ├── src/
│   │   ├── assets/         # Images, icons
│   │   ├── components/     # Reusable components (Navbar, StoreCard, Map)
│   │   ├── pages/          # Pages (Home, Navigation)
│   │   ├── utils/          # Helper functions
│   │   ├── App.js          # Main App component
│   │   ├── index.js        # Entry point
│   ├── public/
│   │   ├── index.html      # HTML template
│   │   ├── styles.css      # Global CSS
│
│── data/                   # JSON Data
│   ├── stores.json         # Store coordinates
│   ├── paths.json          # Path connections between stores
│
│── package.json            # Dependencies
│── README.md               # Project documentation

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
PS C:\Users\Yashaswi\Documents\Projects\indoor navigation\indoor-navigation\frontend> npm audit fix
>>

up to date, audited 1408 packages in 5s

271 packages are looking for funding
  run `npm fund` for details

# npm audit report

nth-check  <2.0.1
Severity: high
Inefficient Regular Expression Complexity in nth-check - https://github.com/advisories/GHSA-rp65-9cf3-cjxr
fix available via `npm audit fix --force`
Will install react-scripts@3.0.1, which is a breaking change
node_modules/svgo/node_modules/nth-check
  css-select  <=3.1.0
  Depends on vulnerable versions of nth-check
  node_modules/svgo/node_modules/css-select
    svgo  1.0.0 - 1.3.2
    Depends on vulnerable versions of css-select
    node_modules/svgo
      @svgr/plugin-svgo  <=5.5.0
      Depends on vulnerable versions of svgo
      node_modules/@svgr/plugin-svgo
        @svgr/webpack  4.0.0 - 5.5.0
        Depends on vulnerable versions of @svgr/plugin-svgo
        node_modules/@svgr/webpack
          react-scripts  >=2.1.4
          Depends on vulnerable versions of @svgr/webpack
          Depends on vulnerable versions of resolve-url-loader
          node_modules/react-scripts

postcss  <8.4.31
Severity: moderate
PostCSS line return parsing error - https://github.com/advisories/GHSA-7fh5-64p2-3v2j   
fix available via `npm audit fix --force`
Will install react-scripts@3.0.1, which is a breaking change
node_modules/resolve-url-loader/node_modules/postcss
  resolve-url-loader  0.0.1-experiment-postcss || 3.0.0-alpha.1 - 4.0.0
  Depends on vulnerable versions of postcss
  node_modules/resolve-url-loader

8 vulnerabilities (2 moderate, 6 high)

To address all issues (including breaking changes), run:
  npm audit fix --force
------------------------------------------------------------------------------------
welcomepage.js

import React, { useState, useEffect } from "react";
import Navbar from "../components/Navbar"; // Import Navbar
import { useNavigate } from "react-router-dom"; // Import useNavigate from react-router-dom
import "./WelcomePage.css";

function WelcomePage() {
  const text = "Welcome to DESTINA";
  const [visibleText, setVisibleText] = useState("");
  const [cursorVisible, setCursorVisible] = useState(true);
  const navigate = useNavigate(); // Hook to navigate to different pages

  useEffect(() => {
    let index = 0;
    const interval = setInterval(() => {
      setVisibleText(text.slice(0, index + 1));
      index++;
      if (index >= text.length) {
        clearInterval(interval);
      }
    }, 150);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setCursorVisible((prev) => !prev);
    }, 500);
    return () => clearInterval(cursorInterval);
  }, []);

  const handleNavigation = () => {
    navigate("/map"); // Redirect to the MapComponent page
  };

  return (
    <>
      <Navbar /> {/* Navbar is placed above the content */}
      <div className="welcome-container">
        <h1 className="glow-text">
          {visibleText}
          <span className="blinking-cursor">{cursorVisible ? "|" : ""}</span>
        </h1>
        <p className="fade-in-text">
          Seamless Navigation, Endless Exploration – Find Your Way, Effortlessly! 🏬✨
        </p>
        <button className="neon-button" onClick={handleNavigation}>
          START NAVIGATION
        </button>
      </div>
    </>
  );
}

export default WelcomePage;
-----------------------------------------------------------------------------------


