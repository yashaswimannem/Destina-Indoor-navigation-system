import React, { useState } from "react";
import { MapContainer, ImageOverlay, Marker, Popup, Polyline } from "react-leaflet";
import "leaflet/dist/leaflet.css";
import mallData from "../data/stores.json"; // Store & Walkable Paths Data
import { findShortestPath } from "./ShortestPath"; // Shortest Path Algorithm
import L from "leaflet";
import mapImage from "../assets/map1.png"; // Mall Blueprint
import markerIconImg from "../assets/marker.png"; // Store Marker Icon

// üó∫Ô∏è Set Map Image Dimensions (Make sure it matches the actual image)
const imageWidth = 1039; // Adjust as per your map image size
const imageHeight = 1080; // Adjust as per your map image size
const bounds = [[0,0], [imageHeight, imageWidth]];

// üìå Custom Marker Icon
const customIcon = new L.Icon({
    iconUrl: markerIconImg,
    iconSize: [25, 25], 
    iconAnchor: [12, 25] 
});

// üìå Function to Adjust Y-Coordinates (Fixes Alignment Issues)
const adjustY = (y) => imageHeight - y; // Flip Y-axis to align correctly

const MapComponent = () => {
    const [shortestPath, setShortestPath] = useState([]);

    // üìå Find & Display Shortest Path
    const handleFindPath = () => {
        const start = "Apollo";  // Replace with user input
        const end = "spar";      // Replace with user input
        const path = findShortestPath(start, end);
        setShortestPath(path);
    };

    return (
        <div>
            <button onClick={handleFindPath} style={{ margin: "10px", padding: "8px", fontSize: "16px" }}>
                Find Shortest Path
            </button>

            <MapContainer 
                center={[imageHeight / 2, imageWidth / 2]}  // Center map
                zoom={1} 
                maxBounds={bounds} 
                style={{ height: "150vh", width: "100vw" }}  // üî• Fullscreen Map
                crs={L.CRS.Simple}
            >
                {/* üó∫Ô∏è Mall Map Background */}
                <ImageOverlay url={mapImage} bounds={bounds} />

                {/* üìç Store Markers */}
                {mallData.stores.map((store) => (
                    <Marker key={store.id} position={[adjustY(store.y), store.x]} icon={customIcon}>
                        <Popup>{store.id}</Popup>
                    </Marker>
                ))}

                {/* üîµ Walkable Paths */}
                {mallData.Walkable_paths.map((path, index) => {
                    const from = mallData.stores.find(s => s.id === path.from);
                    const to = mallData.stores.find(s => s.id === path.to);
                    return from && to ? (
                        <Polyline key={index} positions={[[adjustY(from.y), from.x], [adjustY(to.y), to.x]]} color="blue" />
                    ) : null;
                })}

                {/* üî¥ Shortest Path (Highlighted) */}
                {shortestPath.length > 1 && (
                    <Polyline 
                        positions={shortestPath.map(node => {
                            const store = mallData.stores.find(s => s.id === node);
                            return store ? [adjustY(store.y), store.x] : null;
                        }).filter(Boolean)} 
                        color="red" 
                        weight={5} 
                    />
                )}
            </MapContainer>
        </div>
    );
};

export default MapComponent;
